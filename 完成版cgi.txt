#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"  // ローカルホスト
#define PORT 8080
#define BUFFER_SIZE 1024

int main(void) {
    char *data;
    int pin_str;
    char command[10];
    int pin;

    // HTTPヘッダーを出力
    printf("Content-type: text/html\r\n\r\n");

    // 環境変数からGETデータを取得
    data = getenv("QUERY_STRING");

    if (data == NULL) {
        printf("<html><body><p>No data received</p></body></html>");
        return 1;
    }

    // 受け取ったデータを解析
   sscanf(data, "pin=%d%%26command%%3D%s", &pin_str, command);
 printf("<p>Sent: %s</p>", data);
    // サーバーに接続
    int sock = 0;
    struct sockaddr_in serv_addr;
    char response[BUFFER_SIZE] = {0};

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("<html><body><p>Socket creation error</p></body></html>");
        return 1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // サーバーIPの変換
    if (inet_pton(AF_INET, SERVER_IP, &serv_addr.sin_addr) <= 0) {
        printf("<html><body><p>Invalid address</p></body></html>");
        return 1;
    }

    // サーバーに接続
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("<html><body><p>Connection Failed</p></body></html>");
        return 1;
    }

    // GPIO制御コマンドを送信
    char message[BUFFER_SIZE];
    snprintf(message, sizeof(message), "PIN %d %s\n", pin_str, command);
    send(sock, message, strlen(message), 0);

    // サーバーからの応答を受信
    read(sock, response, BUFFER_SIZE);
    close(sock);

    // 応答HTML
    printf("<html><body>");
    printf("<p>Sent: %s</p>", message);
    printf("<p>Sent: %s</p>", command);
    printf("<p>Sent: %d</p>", &pin_str);
    printf("<p>Response: %s</p>", response);
    printf("<a href=\"/gpio_control.html\">Back</a>");
    printf("</body></html>");

    return 0;
}
